#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from spyne import ComplexModel, Integer, Unicode


class ThType(ComplexModel):
    """
  Attributes:
   - name
   - min
   - max
   - format
   - size
   - description
   - id
  """

    name = Unicode
    min_value = Unicode
    max_value = Unicode
    format_of_value = Unicode
    size = Integer
    description = Unicode
    id = Integer

    def __init__(
        self,
        name=None,
        min=None,
        max=None,
        format=None,
        size=None,
        description=None,
        id=None,
    ):
        self.name = name
        self.min_value = min
        self.max_value = max
        self.format_of_value = format
        self.size = size
        self.description = description
        self.id = id

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThMathOperation(ComplexModel):
    """
  Attributes:
   - name
   - type_of_argument
   - type_of_value
   - description
   - id
  """

    name = Unicode
    type_of_argument = Unicode
    type_of_value = Unicode
    description = Unicode
    id = Integer

    def __init__(
        self,
        name=None,
        type_of_argument=None,
        type_of_value=None,
        description=None,
        id=None,
    ):
        self.name = name
        self.type_of_argument = type_of_argument
        self.type_of_value = type_of_value
        self.description = description
        self.id = id

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThClass(ComplexModel):
    """
  Attributes:
   - name
   - num_of_methods
   - num_of_fields
   - id
  """

    name = Unicode
    num_of_methods = Integer
    num_of_fields = Integer
    id = Integer

    def __init__(self, name=None, num_of_methods=None, num_of_fields=None, id=None):
        self.name = name
        self.num_of_methods = num_of_methods
        self.num_of_fields = num_of_fields
        self.id = id

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


# class InvalidID(TException):
#     """
#   Attributes:
#    - id
#    - why
#   """

#     def __init__(self, id=None, why=None):
#         self.id = id
#         self.why = why

#     def __str__(self):
#         return repr(self)

#     def __repr__(self):
#         L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
#         return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

#     def __eq__(self, other):
#         return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

#     def __ne__(self, other):
#         return not (self == other)

