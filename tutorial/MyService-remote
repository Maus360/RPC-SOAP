#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urllib.parse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import MyService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == "--help":
    print("")
    print(
        "Usage: "
        + sys.argv[0]
        + " [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]"
    )
    print("")
    print("Functions:")
    print("   get_class_all()")
    print("  ThClass get_class(int id)")
    print(
        "  void set_class(string name, int number_of_methods, int number_of_properties)"
    )
    print(
        "  void reset_class(int id, string name, int number_of_methods, int number_of_properties)"
    )
    print("  void delete_class(int id)")
    print("   get_math_operations_all()")
    print("  ThMathOperation get_math_peration(int id)")
    print(
        "  void set_math_operation(string name, string type_of_argument, string type_of_value, string description)"
    )
    print(
        "  void reset_math_operation(int id, string name, string type_of_argument, string type_of_value, string description)"
    )
    print("  void delete_math_operation(int id)")
    print("   get_type_all()")
    print("  ThType get_type(int id)")
    print(
        "  void set_type(string name, string min, string max, string format, int size, string description)"
    )
    print(
        "  void reset_type(int id, string name, string min, string max, string format, int size, string description)"
    )
    print("  void delete_type(int id)")
    print("")
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = "localhost"
port = 9090
uri = ""
framed = False
http = False
argi = 1

if sys.argv[argi] == "-h":
    parts = sys.argv[argi + 1].split(":")
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == "-u":
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(":")
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += "?%s" % url[4]
    http = True
    argi += 2

if sys.argv[argi] == "-f" or sys.argv[argi] == "-framed":
    framed = True
    argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi + 1 :]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MyService.Client(protocol)
transport.open()

if cmd == "get_class_all":
    if len(args) != 0:
        print("get_class_all requires 0 args")
        sys.exit(1)
    pp.pprint(client.get_class_all())

elif cmd == "get_class":
    if len(args) != 1:
        print("get_class requires 1 args")
        sys.exit(1)
    pp.pprint(client.get_class(eval(args[0])))

elif cmd == "set_class":
    if len(args) != 3:
        print("set_class requires 3 args")
        sys.exit(1)
    pp.pprint(client.set_class(args[0], eval(args[1]), eval(args[2])))

elif cmd == "reset_class":
    if len(args) != 4:
        print("reset_class requires 4 args")
        sys.exit(1)
    pp.pprint(client.reset_class(eval(args[0]), args[1], eval(args[2]), eval(args[3])))

elif cmd == "delete_class":
    if len(args) != 1:
        print("delete_class requires 1 args")
        sys.exit(1)
    pp.pprint(client.delete_class(eval(args[0])))

elif cmd == "get_math_operations_all":
    if len(args) != 0:
        print("get_math_operations_all requires 0 args")
        sys.exit(1)
    pp.pprint(client.get_math_operations_all())

elif cmd == "get_math_peration":
    if len(args) != 1:
        print("get_math_peration requires 1 args")
        sys.exit(1)
    pp.pprint(client.get_math_peration(eval(args[0])))

elif cmd == "set_math_operation":
    if len(args) != 4:
        print("set_math_operation requires 4 args")
        sys.exit(1)
    pp.pprint(client.set_math_operation(args[0], args[1], args[2], args[3]))

elif cmd == "reset_math_operation":
    if len(args) != 5:
        print("reset_math_operation requires 5 args")
        sys.exit(1)
    pp.pprint(
        client.reset_math_operation(eval(args[0]), args[1], args[2], args[3], args[4])
    )

elif cmd == "delete_math_operation":
    if len(args) != 1:
        print("delete_math_operation requires 1 args")
        sys.exit(1)
    pp.pprint(client.delete_math_operation(eval(args[0])))

elif cmd == "get_type_all":
    if len(args) != 0:
        print("get_type_all requires 0 args")
        sys.exit(1)
    pp.pprint(client.get_type_all())

elif cmd == "get_type":
    if len(args) != 1:
        print("get_type requires 1 args")
        sys.exit(1)
    pp.pprint(client.get_type(eval(args[0])))

elif cmd == "set_type":
    if len(args) != 6:
        print("set_type requires 6 args")
        sys.exit(1)
    pp.pprint(
        client.set_type(args[0], args[1], args[2], args[3], eval(args[4]), args[5])
    )

elif cmd == "reset_type":
    if len(args) != 7:
        print("reset_type requires 7 args")
        sys.exit(1)
    pp.pprint(
        client.reset_type(
            eval(args[0]), args[1], args[2], args[3], args[4], eval(args[5]), args[6]
        )
    )

elif cmd == "delete_type":
    if len(args) != 1:
        print("delete_type requires 1 args")
        sys.exit(1)
    pp.pprint(client.delete_type(eval(args[0])))

else:
    print("Unrecognized method %s" % cmd)
    sys.exit(1)

transport.close()
